// Code generated by MockGen. DO NOT EDIT.
// Source: notion_repository.go
//
// Generated by this command:
//
//	mockgen -source=notion_repository.go -destination=../mock/repository/mock_notion_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "template-echo-notion-integration/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockKaimemoRepository is a mock of KaimemoRepository interface.
type MockKaimemoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKaimemoRepositoryMockRecorder
	isgomock struct{}
}

// MockKaimemoRepositoryMockRecorder is the mock recorder for MockKaimemoRepository.
type MockKaimemoRepositoryMockRecorder struct {
	mock *MockKaimemoRepository
}

// NewMockKaimemoRepository creates a new mock instance.
func NewMockKaimemoRepository(ctrl *gomock.Controller) *MockKaimemoRepository {
	mock := &MockKaimemoRepository{ctrl: ctrl}
	mock.recorder = &MockKaimemoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKaimemoRepository) EXPECT() *MockKaimemoRepositoryMockRecorder {
	return m.recorder
}

// FetchKaimemo mocks base method.
func (m *MockKaimemoRepository) FetchKaimemo(userID string) ([]model.KaimemoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchKaimemo", userID)
	ret0, _ := ret[0].([]model.KaimemoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchKaimemo indicates an expected call of FetchKaimemo.
func (mr *MockKaimemoRepositoryMockRecorder) FetchKaimemo(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKaimemo", reflect.TypeOf((*MockKaimemoRepository)(nil).FetchKaimemo), userID)
}

// FetchKaimemoAmountRecords mocks base method.
func (m *MockKaimemoRepository) FetchKaimemoAmountRecords(userID string) (*model.KaimemoAmountRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchKaimemoAmountRecords", userID)
	ret0, _ := ret[0].(*model.KaimemoAmountRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchKaimemoAmountRecords indicates an expected call of FetchKaimemoAmountRecords.
func (mr *MockKaimemoRepositoryMockRecorder) FetchKaimemoAmountRecords(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKaimemoAmountRecords", reflect.TypeOf((*MockKaimemoRepository)(nil).FetchKaimemoAmountRecords), userID)
}

// InsertKaimemo mocks base method.
func (m *MockKaimemoRepository) InsertKaimemo(req model.CreateKaimemoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKaimemo", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertKaimemo indicates an expected call of InsertKaimemo.
func (mr *MockKaimemoRepositoryMockRecorder) InsertKaimemo(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKaimemo", reflect.TypeOf((*MockKaimemoRepository)(nil).InsertKaimemo), req)
}

// InsertKaimemoAmount mocks base method.
func (m *MockKaimemoRepository) InsertKaimemoAmount(req model.CreateKaimemoAmountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKaimemoAmount", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertKaimemoAmount indicates an expected call of InsertKaimemoAmount.
func (mr *MockKaimemoRepositoryMockRecorder) InsertKaimemoAmount(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKaimemoAmount", reflect.TypeOf((*MockKaimemoRepository)(nil).InsertKaimemoAmount), req)
}

// RemoveKaimemo mocks base method.
func (m *MockKaimemoRepository) RemoveKaimemo(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKaimemo", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKaimemo indicates an expected call of RemoveKaimemo.
func (mr *MockKaimemoRepositoryMockRecorder) RemoveKaimemo(id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKaimemo", reflect.TypeOf((*MockKaimemoRepository)(nil).RemoveKaimemo), id, userID)
}

// RemoveKaimemoAmount mocks base method.
func (m *MockKaimemoRepository) RemoveKaimemoAmount(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKaimemoAmount", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKaimemoAmount indicates an expected call of RemoveKaimemoAmount.
func (mr *MockKaimemoRepositoryMockRecorder) RemoveKaimemoAmount(id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKaimemoAmount", reflect.TypeOf((*MockKaimemoRepository)(nil).RemoveKaimemoAmount), id, userID)
}
