// Code generated by MockGen. DO NOT EDIT.
// Source: kaimemo_service.go
//
// Generated by this command:
//
//	mockgen -source=kaimemo_service.go -destination=../mock/service/mock_kaimemo_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "template-echo-notion-integration/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockKaimemoService is a mock of KaimemoService interface.
type MockKaimemoService struct {
	ctrl     *gomock.Controller
	recorder *MockKaimemoServiceMockRecorder
	isgomock struct{}
}

// MockKaimemoServiceMockRecorder is the mock recorder for MockKaimemoService.
type MockKaimemoServiceMockRecorder struct {
	mock *MockKaimemoService
}

// NewMockKaimemoService creates a new mock instance.
func NewMockKaimemoService(ctrl *gomock.Controller) *MockKaimemoService {
	mock := &MockKaimemoService{ctrl: ctrl}
	mock.recorder = &MockKaimemoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKaimemoService) EXPECT() *MockKaimemoServiceMockRecorder {
	return m.recorder
}

// CreateKaimemo mocks base method.
func (m *MockKaimemoService) CreateKaimemo(req model.CreateKaimemoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKaimemo", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKaimemo indicates an expected call of CreateKaimemo.
func (mr *MockKaimemoServiceMockRecorder) CreateKaimemo(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKaimemo", reflect.TypeOf((*MockKaimemoService)(nil).CreateKaimemo), req)
}

// CreateKaimemoAmount mocks base method.
func (m *MockKaimemoService) CreateKaimemoAmount(req model.CreateKaimemoAmountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKaimemoAmount", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKaimemoAmount indicates an expected call of CreateKaimemoAmount.
func (mr *MockKaimemoServiceMockRecorder) CreateKaimemoAmount(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKaimemoAmount", reflect.TypeOf((*MockKaimemoService)(nil).CreateKaimemoAmount), req)
}

// FetchKaimemo mocks base method.
func (m *MockKaimemoService) FetchKaimemo(userID string) ([]model.KaimemoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchKaimemo", userID)
	ret0, _ := ret[0].([]model.KaimemoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchKaimemo indicates an expected call of FetchKaimemo.
func (mr *MockKaimemoServiceMockRecorder) FetchKaimemo(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKaimemo", reflect.TypeOf((*MockKaimemoService)(nil).FetchKaimemo), userID)
}

// FetchKaimemoSummaryRecord mocks base method.
func (m *MockKaimemoService) FetchKaimemoSummaryRecord(userID string) (model.KaimemoSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchKaimemoSummaryRecord", userID)
	ret0, _ := ret[0].(model.KaimemoSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchKaimemoSummaryRecord indicates an expected call of FetchKaimemoSummaryRecord.
func (mr *MockKaimemoServiceMockRecorder) FetchKaimemoSummaryRecord(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKaimemoSummaryRecord", reflect.TypeOf((*MockKaimemoService)(nil).FetchKaimemoSummaryRecord), userID)
}

// RemoveKaimemo mocks base method.
func (m *MockKaimemoService) RemoveKaimemo(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKaimemo", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKaimemo indicates an expected call of RemoveKaimemo.
func (mr *MockKaimemoServiceMockRecorder) RemoveKaimemo(id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKaimemo", reflect.TypeOf((*MockKaimemoService)(nil).RemoveKaimemo), id, userID)
}

// RemoveKaimemoAmount mocks base method.
func (m *MockKaimemoService) RemoveKaimemoAmount(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKaimemoAmount", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKaimemoAmount indicates an expected call of RemoveKaimemoAmount.
func (mr *MockKaimemoServiceMockRecorder) RemoveKaimemoAmount(id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKaimemoAmount", reflect.TypeOf((*MockKaimemoService)(nil).RemoveKaimemoAmount), id, userID)
}
