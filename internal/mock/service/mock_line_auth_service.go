// Code generated by MockGen. DO NOT EDIT.
// Source: line_auth_service.go
//
// Generated by this command:
//
//	mockgen -source=line_auth_service.go -destination=../mock/service/mock_line_auth_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockLineAuthService is a mock of LineAuthService interface.
type MockLineAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockLineAuthServiceMockRecorder
	isgomock struct{}
}

// MockLineAuthServiceMockRecorder is the mock recorder for MockLineAuthService.
type MockLineAuthServiceMockRecorder struct {
	mock *MockLineAuthService
}

// NewMockLineAuthService creates a new mock instance.
func NewMockLineAuthService(ctrl *gomock.Controller) *MockLineAuthService {
	mock := &MockLineAuthService{ctrl: ctrl}
	mock.recorder = &MockLineAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineAuthService) EXPECT() *MockLineAuthServiceMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockLineAuthService) Callback(c echo.Context, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", c, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Callback indicates an expected call of Callback.
func (mr *MockLineAuthServiceMockRecorder) Callback(c, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockLineAuthService)(nil).Callback), c, code)
}

// CheckAuth mocks base method.
func (m *MockLineAuthService) CheckAuth(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockLineAuthServiceMockRecorder) CheckAuth(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockLineAuthService)(nil).CheckAuth), c)
}

// Login mocks base method.
func (m *MockLineAuthService) Login(c echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLineAuthServiceMockRecorder) Login(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLineAuthService)(nil).Login), c)
}

// Logout mocks base method.
func (m *MockLineAuthService) Logout(c echo.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", c)
}

// Logout indicates an expected call of Logout.
func (mr *MockLineAuthServiceMockRecorder) Logout(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockLineAuthService)(nil).Logout), c)
}
