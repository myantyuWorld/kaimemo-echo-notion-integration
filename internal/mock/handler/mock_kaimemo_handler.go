// Code generated by MockGen. DO NOT EDIT.
// Source: kaimemo_handler.go
//
// Generated by this command:
//
//	mockgen -source=kaimemo_handler.go -destination=../mock/handler/mock_kaimemo_handler.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockKaimemoHandler is a mock of KaimemoHandler interface.
type MockKaimemoHandler struct {
	ctrl     *gomock.Controller
	recorder *MockKaimemoHandlerMockRecorder
	isgomock struct{}
}

// MockKaimemoHandlerMockRecorder is the mock recorder for MockKaimemoHandler.
type MockKaimemoHandlerMockRecorder struct {
	mock *MockKaimemoHandler
}

// NewMockKaimemoHandler creates a new mock instance.
func NewMockKaimemoHandler(ctrl *gomock.Controller) *MockKaimemoHandler {
	mock := &MockKaimemoHandler{ctrl: ctrl}
	mock.recorder = &MockKaimemoHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKaimemoHandler) EXPECT() *MockKaimemoHandlerMockRecorder {
	return m.recorder
}

// CreateKaimemo mocks base method.
func (m *MockKaimemoHandler) CreateKaimemo(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKaimemo", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKaimemo indicates an expected call of CreateKaimemo.
func (mr *MockKaimemoHandlerMockRecorder) CreateKaimemo(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKaimemo", reflect.TypeOf((*MockKaimemoHandler)(nil).CreateKaimemo), c)
}

// CreateKaimemoAmount mocks base method.
func (m *MockKaimemoHandler) CreateKaimemoAmount(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKaimemoAmount", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKaimemoAmount indicates an expected call of CreateKaimemoAmount.
func (mr *MockKaimemoHandlerMockRecorder) CreateKaimemoAmount(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKaimemoAmount", reflect.TypeOf((*MockKaimemoHandler)(nil).CreateKaimemoAmount), c)
}

// FetchKaimemo mocks base method.
func (m *MockKaimemoHandler) FetchKaimemo(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchKaimemo", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchKaimemo indicates an expected call of FetchKaimemo.
func (mr *MockKaimemoHandlerMockRecorder) FetchKaimemo(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKaimemo", reflect.TypeOf((*MockKaimemoHandler)(nil).FetchKaimemo), c)
}

// FetchKaimemoSummaryRecord mocks base method.
func (m *MockKaimemoHandler) FetchKaimemoSummaryRecord(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchKaimemoSummaryRecord", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchKaimemoSummaryRecord indicates an expected call of FetchKaimemoSummaryRecord.
func (mr *MockKaimemoHandlerMockRecorder) FetchKaimemoSummaryRecord(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKaimemoSummaryRecord", reflect.TypeOf((*MockKaimemoHandler)(nil).FetchKaimemoSummaryRecord), c)
}

// RemoveKaimemo mocks base method.
func (m *MockKaimemoHandler) RemoveKaimemo(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKaimemo", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKaimemo indicates an expected call of RemoveKaimemo.
func (mr *MockKaimemoHandlerMockRecorder) RemoveKaimemo(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKaimemo", reflect.TypeOf((*MockKaimemoHandler)(nil).RemoveKaimemo), c)
}

// RemoveKaimemoAmount mocks base method.
func (m *MockKaimemoHandler) RemoveKaimemoAmount(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKaimemoAmount", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKaimemoAmount indicates an expected call of RemoveKaimemoAmount.
func (mr *MockKaimemoHandlerMockRecorder) RemoveKaimemoAmount(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKaimemoAmount", reflect.TypeOf((*MockKaimemoHandler)(nil).RemoveKaimemoAmount), c)
}

// WebsocketTelegraph mocks base method.
func (m *MockKaimemoHandler) WebsocketTelegraph(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebsocketTelegraph", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebsocketTelegraph indicates an expected call of WebsocketTelegraph.
func (mr *MockKaimemoHandlerMockRecorder) WebsocketTelegraph(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebsocketTelegraph", reflect.TypeOf((*MockKaimemoHandler)(nil).WebsocketTelegraph), c)
}
